// This file is fully generated by running scannergen v1.5.0

// User-defined %HEADERS_FOR_CPP begins
#include "ParserIdDef.h"
// User-defined %HEADERS_FOR_CPP ends

#include "Scanner.h"

namespace {

// ASCII TABLE:
//  0: \x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f
// 20:  !\"#$%&\'()*+,-./0123456789:;<=>?
// 40: @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_
// 60: `abcdefghijklmnopqrstuvwxyz{|}~\x7f
constinit const C_Scanner::C_GotoPair
GOTO_STATE1[6] ={
    {'\t', 3},
    {'\n', std::numeric_limits<int8_t>::max()},
    {'\v', 3},
    {'\x0e', std::numeric_limits<int8_t>::max()},
    {' ', 3},
    {'!', std::numeric_limits<int8_t>::max()}},
GOTO_STATE2[16] ={
    {'\t', 3},
    {'\n', std::numeric_limits<int8_t>::max()},
    {'\v', 3},
    {'\x0e', std::numeric_limits<int8_t>::max()},
    {' ', 3},
    {'!', std::numeric_limits<int8_t>::max()},
    {'.', 8},
    {'/', std::numeric_limits<int8_t>::max()},
    {'A', 7},
    {'[', std::numeric_limits<int8_t>::max()},
    {'_', 7},
    {'`', std::numeric_limits<int8_t>::max()},
    {'a', 7},
    {'t', 2},
    {'u', 7},
    {'{', std::numeric_limits<int8_t>::max()}},
GOTO_STATE3[2] ={
    {'.', 5},
    {'/', std::numeric_limits<int8_t>::max()}},
GOTO_STATE4[10] ={
    {'0', 7},
    {':', std::numeric_limits<int8_t>::max()},
    {'A', 7},
    {'[', std::numeric_limits<int8_t>::max()},
    {'_', 7},
    {'`', std::numeric_limits<int8_t>::max()},
    {'a', 7},
    {'e', 1},
    {'f', 7},
    {'{', std::numeric_limits<int8_t>::max()}},
GOTO_STATE5[10] ={
    {'0', 7},
    {':', std::numeric_limits<int8_t>::max()},
    {'A', 7},
    {'[', std::numeric_limits<int8_t>::max()},
    {'_', 7},
    {'`', std::numeric_limits<int8_t>::max()},
    {'a', 7},
    {'p', 6},
    {'q', 7},
    {'{', std::numeric_limits<int8_t>::max()}},
GOTO_STATE6[10] ={
    {'0', 7},
    {':', std::numeric_limits<int8_t>::max()},
    {'A', 7},
    {'[', std::numeric_limits<int8_t>::max()},
    {'_', 7},
    {'`', std::numeric_limits<int8_t>::max()},
    {'a', 7},
    {'y', 4},
    {'z', 7},
    {'{', std::numeric_limits<int8_t>::max()}},
GOTO_STATE7[8] ={
    {'0', 7},
    {':', std::numeric_limits<int8_t>::max()},
    {'A', 7},
    {'[', std::numeric_limits<int8_t>::max()},
    {'_', 7},
    {'`', std::numeric_limits<int8_t>::max()},
    {'a', 7},
    {'{', std::numeric_limits<int8_t>::max()}};

constinit const C_Scanner::C_StateRec STATES[9] = {
    { GOTO_STATE2,	nullptr	},  // 0
    { GOTO_STATE7,	bux::createNothing<TID_KEYWORD_type,bux::C_LexUTF32>	},  // 1
    { GOTO_STATE6,	bux::createPlainString<TID_LEX_Id,bux::C_LexUTF32>	},  // 2
    { GOTO_STATE1,	bux::createNothing<TID_LEX_Spaces,bux::C_LexUTF32>	},  // 3
    { GOTO_STATE5,	bux::createPlainString<TID_LEX_Id,bux::C_LexUTF32>	},  // 4
    { nullptr,	bux::createNothing<TID_LITERAL_2e2e,bux::C_LexUTF32>	},  // 5
    { GOTO_STATE4,	bux::createPlainString<TID_LEX_Id,bux::C_LexUTF32>	},  // 6
    { GOTO_STATE7,	bux::createPlainString<TID_LEX_Id,bux::C_LexUTF32>	},  // 7
    { GOTO_STATE3,	nullptr	}}; // 8

constinit const uint8_t GOTO_SIZE[9] = {
    16,	// 0
    8,	// 1
    10,	// 2
    6,	// 3
    10,	// 4
    0,	// 5
    10,	// 6
    8,	// 7
    2};	// 8

} // namespace

C_Scanner::C_Scanner(bux::I_Parser &parser):
    bux::C_ScannerImpl<uint8_t,int8_t,bux::C_LexUTF32>(parser)
{
    stateTables(STATES, GOTO_SIZE);
}
